package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"errors"
	"strconv"

	"github.com/farhanfatur/simple-example-graphql-golang/graph/model"
	"github.com/farhanfatur/simple-example-graphql-golang/internal/auth"
	"github.com/farhanfatur/simple-example-graphql-golang/internal/links"
	"github.com/farhanfatur/simple-example-graphql-golang/internal/pkg/jwt"
	"github.com/farhanfatur/simple-example-graphql-golang/internal/users"
)

// CreateLink is the resolver for the createLink field.
func (r *mutationResolver) CreateLink(ctx context.Context, input model.NewLink) (*model.Link, error) {
	user := auth.ForContext(ctx)
	if user == nil {
		return &model.Link{}, errors.New("Access denied")
	}

	var link links.Link
	link.ID = int64(input.ID)
	link.User = user
	link.Title = input.Title
	link.Address = input.Address
	ID := link.Save()
	userData := &model.User{
		ID:   user.ID,
		Name: user.Username,
	}

	return &model.Link{ID: strconv.FormatInt(ID, 10), Title: link.Title, Address: link.Address, User: userData}, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (string, error) {
	var user = new(users.User)
	user.Username = input.Username
	user.Password = input.Password
	user.Create()

	token, err := jwt.GenerateToken(user.Username)
	if err != nil {
		return "", err
	}

	return token, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.Login) (string, error) {
	var user = new(users.User)
	user.Username = input.Username
	user.Password = input.Password
	authenticate := user.Authenticate()
	if authenticate {
		return "", &users.WrongUsernameOrPasswordError{}
	}

	token, err := jwt.GenerateToken(user.Username)
	if err != nil {
		return "", nil
	}

	return token, nil
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, input model.RefreshTokenInput) (string, error) {
	username, err := jwt.ParseToken(input.Token)
	if err != nil {
		return "", err
	}

	token, err := jwt.GenerateToken(username)
	if err != nil {
		return "", nil
	}

	return token, nil
}

// Links is the resolver for the links field.
func (r *queryResolver) Links(ctx context.Context) ([]*model.Link, error) {
	var link links.Link
	var results []*model.Link
	var dbLink []links.Link = link.GetAll()
	for _, res := range dbLink {
		userData := &model.User{
			ID:   res.User.ID,
			Name: res.User.Username,
		}
		results = append(results, &model.Link{ID: string(res.ID), Title: res.Title, Address: res.Address, User: userData})
	}
	return results, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
